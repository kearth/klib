<!-- Code generated by gomarkdoc. DO NOT EDIT -->

# klib

```go
import "github.com/kearth/klib"
```

## Index

- [func Version\(\) string](<#Version>)


<a name="Version"></a>
## func [Version](<https://github.com/kearth/klib/blob/master/main.go#L3>)

```go
func Version() string
```



# kctx

```go
import "github.com/kearth/klib/kctx"
```

提供增强版上下文管理，基于标准 context.Context 扩展， 支持元数据键值对存储、追踪ID（TraceID）自动生成与继承， 并保证并发安全的读写操作。

核心特性： \- 完全兼容标准 context 接口，可无缝替换原生 context \- 内置 TraceID 用于分布式追踪，支持从父上下文继承 \- 提供线程安全的 Set/Get 方法管理元数据 \- 支持 WithCancel/WithTimeout 等衍生上下文创建

## Index

- [Constants](<#constants>)
- [type Context](<#Context>)
  - [func New\(parent ...context.Context\) Context](<#New>)
  - [func WithCancel\(parent Context\) \(Context, context.CancelFunc\)](<#WithCancel>)
  - [func WithTimeout\(parent Context, timeout time.Duration\) \(Context, context.CancelFunc\)](<#WithTimeout>)


## Constants

<a name="TraceIDKey"></a>

```go
const (
    // TraceIDKey 用于在上下文中存储/获取 TraceID 的键，
    // 可通过 context.Value(TraceIDKey) 从父上下文继承 TraceID。
    TraceIDKey = "TraceID"
    // MetaMapKey 用于在上下文中存储/获取元数据映射的键，
    // 通过 context.Value(MetaMapKey) 可获取所有元数据的副本。
    MetaMapKey = "MetaMap"
)
```

<a name="Context"></a>
## type [Context](<https://github.com/kearth/klib/blob/master/kctx/context.go#L33-L41>)

Context 扩展标准 context.Context 接口，增加元数据和追踪ID管理能力。 实现了标准库 context.Context 的所有方法，可直接作为标准上下文使用。

```go
type Context interface {
    context.Context
    Get(key string) string
    Set(key string, val string)
    Values() map[string]string
    Context() context.Context
    SetContext(ctx context.Context)
    TraceID() string
}
```

<a name="New"></a>
### func [New](<https://github.com/kearth/klib/blob/master/kctx/context.go#L53>)

```go
func New(parent ...context.Context) Context
```

创建上下文

<a name="WithCancel"></a>
### func [WithCancel](<https://github.com/kearth/klib/blob/master/kctx/context.go#L193>)

```go
func WithCancel(parent Context) (Context, context.CancelFunc)
```

\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- 上下文衍生函数 \-\-\-\-\-\-\-\-\-\-\-\-\-\-\- WithCancel 基于父上下文创建可取消的新上下文，并发安全

<a name="WithTimeout"></a>
### func [WithTimeout](<https://github.com/kearth/klib/blob/master/kctx/context.go#L216>)

```go
func WithTimeout(parent Context, timeout time.Duration) (Context, context.CancelFunc)
```

WithTimeout 包级函数：基于父上下文创建带超时的新上下文（核心调整点）

# kerr

```go
import "github.com/kearth/klib/kerr"
```

## Index

- [Variables](<#variables>)
- [type Error](<#Error>)
- [type KError](<#KError>)
  - [func New\(code int, msg string\) \*KError](<#New>)
  - [func \(e \*KError\) Code\(\) int](<#KError.Code>)
  - [func \(e \*KError\) Display\(\) string](<#KError.Display>)
  - [func \(e \*KError\) Error\(\) string](<#KError.Error>)
  - [func \(e \*KError\) Format\(f fmt.State, c rune\)](<#KError.Format>)
  - [func \(e \*KError\) Is\(target error\) bool](<#KError.Is>)
  - [func \(e \*KError\) MarshalJSON\(\) \(\[\]byte, error\)](<#KError.MarshalJSON>)
  - [func \(e \*KError\) Stack\(\) string](<#KError.Stack>)
  - [func \(e \*KError\) ToJSON\(\) string](<#KError.ToJSON>)
  - [func \(e \*KError\) Unwrap\(\) error](<#KError.Unwrap>)
  - [func \(e \*KError\) WithDisplay\(display string\) Error](<#KError.WithDisplay>)
  - [func \(e \*KError\) WithStack\(skip ...int\) Error](<#KError.WithStack>)
  - [func \(e \*KError\) Wrap\(err error\) Error](<#KError.Wrap>)


## Variables

<a name="Succ"></a>常用通用错误码常量

```go
var (
    // =====================
    // 0 - 成功
    // =====================
    Succ = New(0, "success").WithDisplay("操作成功")

    // =====================
    // 1xxxx - 系统/基础设施错误
    // =====================
    SystemError     = New(10000, "system error").WithDisplay("系统错误，请稍后重试")
    ConfigError     = New(10001, "configuration error").WithDisplay("系统配置错误")
    TimeoutError    = New(10002, "operation timeout").WithDisplay("请求超时")
    PanicError      = New(10003, "panic occurred").WithDisplay("系统异常")
    InternalIOError = New(10004, "io error").WithDisplay("IO 操作失败")

    // =====================
    // 2xxxx - 用户/认证/权限错误
    // =====================
    Unauthorized  = New(20000, "unauthorized").WithDisplay("未授权，请登录")
    Forbidden     = New(20001, "forbidden").WithDisplay("没有访问权限")
    UserNotFound  = New(20002, "user not found").WithDisplay("用户不存在")
    PasswordError = New(20003, "invalid password").WithDisplay("密码错误")
    TokenExpired  = New(20004, "token expired").WithDisplay("登录状态已过期")
    AccountLocked = New(20005, "account locked").WithDisplay("账号已锁定")
    QuotaExceeded = New(20006, "quota exceeded").WithDisplay("已超出使用限制")

    // =====================
    // 3xxxx - 业务逻辑错误
    // =====================
    InvalidState      = New(30000, "invalid state").WithDisplay("当前状态不允许此操作")
    OperationConflict = New(30001, "operation conflict").WithDisplay("操作冲突或重复执行")
    DependencyMissing = New(30002, "dependency missing").WithDisplay("依赖缺失或未初始化")
    NoData            = New(30003, "no data").WithDisplay("没有符合条件的数据")
    ValidationFailed  = New(30004, "validation failed").WithDisplay("数据验证失败")

    // =====================
    // 4xxxx - 外部依赖错误
    // =====================
    DBError           = New(40000, "database error").WithDisplay("数据库异常")
    CacheError        = New(40001, "cache error").WithDisplay("缓存服务异常")
    NetworkError      = New(40002, "network error").WithDisplay("网络异常，请稍后再试")
    ThirdPartyError   = New(40003, "third-party service error").WithDisplay("第三方服务异常")
    MessageQueueError = New(40004, "message queue error").WithDisplay("消息队列异常")

    // =====================
    // 5xxxx - 核心组件/框架错误
    // =====================
    NameRegistered    = New(50000, "name already registered").WithDisplay("名称已注册")
    NameNotRegistered = New(50001, "name not registered").WithDisplay("名称未注册")
    ResourcePoolEmpty = New(50002, "resource pool empty").WithDisplay("资源池为空")
    ServiceNotReady   = New(50003, "service not ready").WithDisplay("服务未就绪")
)
```

<a name="Error"></a>
## type [Error](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L12-L23>)

Error 定义了错误接口

```go
type Error interface {
    Code() int
    Display() string
    Wrap(err error) Error
    Unwrap() error
    Stack() string
    Is(target error) bool
    WithStack(skip ...int) Error
    WithDisplay(display string) Error
    ToJSON() string
    // contains filtered or unexported methods
}
```

<a name="KError"></a>
## type [KError](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L35-L41>)

KError 是 Error 的默认实现

```go
type KError struct {
    // contains filtered or unexported fields
}
```

<a name="New"></a>
### func [New](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L26>)

```go
func New(code int, msg string) *KError
```

New 创建一个新的错误实例

<a name="KError.Code"></a>
### func \(\*KError\) [Code](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L52>)

```go
func (e *KError) Code() int
```

Code 返回错误码

<a name="KError.Display"></a>
### func \(\*KError\) [Display](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L57>)

```go
func (e *KError) Display() string
```

Display 返回错误显示信息

<a name="KError.Error"></a>
### func \(\*KError\) [Error](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L44>)

```go
func (e *KError) Error() string
```

Error 返回错误信息

<a name="KError.Format"></a>
### func \(\*KError\) [Format](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L149>)

```go
func (e *KError) Format(f fmt.State, c rune)
```

Format 支持 fmt.Printf\("%\+v", err\) 打印堆栈

<a name="KError.Is"></a>
### func \(\*KError\) [Is](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L114>)

```go
func (e *KError) Is(target error) bool
```

Is 判断相同错误码的错误

<a name="KError.MarshalJSON"></a>
### func \(\*KError\) [MarshalJSON](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L171>)

```go
func (e *KError) MarshalJSON() ([]byte, error)
```

MarshalJSON 支持 JSON 序列化

<a name="KError.Stack"></a>
### func \(\*KError\) [Stack](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L97>)

```go
func (e *KError) Stack() string
```

Stack 返回调用栈

<a name="KError.ToJSON"></a>
### func \(\*KError\) [ToJSON](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L208>)

```go
func (e *KError) ToJSON() string
```



<a name="KError.Unwrap"></a>
### func \(\*KError\) [Unwrap](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L92>)

```go
func (e *KError) Unwrap() error
```

Unwrap 返回被包装的错误

<a name="KError.WithDisplay"></a>
### func \(\*KError\) [WithDisplay](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L66>)

```go
func (e *KError) WithDisplay(display string) Error
```

WithDisplay 设置错误显示信息

<a name="KError.WithStack"></a>
### func \(\*KError\) [WithStack](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L128>)

```go
func (e *KError) WithStack(skip ...int) Error
```

WithStack 收集调用栈，返回新实例

<a name="KError.Wrap"></a>
### func \(\*KError\) [Wrap](<https://github.com/kearth/klib/blob/master/kerr/errors.go#L78>)

```go
func (e *KError) Wrap(err error) Error
```

Wrap 包装错误，返回新实例

# kutil

```go
import "github.com/kearth/klib/kutil"
```

## Index

- [func As\[T any\]\(v any\) \(T, bool\)](<#As>)
- [func If\[T any\]\(condition bool, trueVal any, falseVal ...any\) T](<#If>)


<a name="As"></a>
## func [As](<https://github.com/kearth/klib/blob/master/kutil/util.go#L34>)

```go
func As[T any](v any) (T, bool)
```

As 尝试将任意类型 v 转换为 T 类型，内部基于 gconv 实现，支持： 1. 基本类型互转（如 string ↔ int、bool ↔ float 等）； 2. 复合类型转换（如 slice ↔ array、map ↔ struct 等，需符合 gconv 规则）。 返回转换后的值和是否成功（true 表示转换有效）。

<a name="If"></a>
## func [If](<https://github.com/kearth/klib/blob/master/kutil/util.go#L9>)

```go
func If[T any](condition bool, trueVal any, falseVal ...any) T
```

If 实现两种功能： 1. 三元运算：当传入 trueVal 和 falseVal 时，返回对应值 2. 条件执行：当传入 f（或 f、g）时，执行对应函数 注：两种功能通过参数类型区分，互斥使用

Generated by [gomarkdoc](<https://github.com/princjef/gomarkdoc>)
